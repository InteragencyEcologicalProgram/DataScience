tutoR
========================================================
author: David J. Harris
date: December 6-7, 2014
transition: none


Workshop goals:
========================================================
incremental:true

* Learn enough to get started on your own
* Learn what tools are available for when you need them
* Don't try to absorb *everything*.

  Ask lots of questions!

Topics
========================================================

* **Saturday morning**
  * Introduction, examples
  * Talking to R
  * Getting help
  * Errors, warnings, & bugs
  * Data
* **Saturday afternoon**
  * Plotting
  * Importing data
  * Loops
  * Stats

***

* **Sunday**
  * text
  * functions
  * formatting excel data
  * reproducibility

Why code?
===================================
* Automation
* Reproducibility
* Customization

Example 1: data cleaning
==================================
```{r, echo = FALSE}
mynames <- c("Helianthus annuus", "Pinus contort", "Poa anua", "Abis magnifica",
    "Rosa california", "Festuca arundinace", "Sorbus occidentalos","Madia sateva")
```

```{r, cache = TRUE}
library(taxize)
tnrs(query = mynames, source = "iPlant_TNRS")[ , c(1:2)]
```

Example 2: Data cleaning
===============================
incremental:true
    34.868688 N, 87.6041417 W 
    34.6386747 N, 87.1912919 W 
    34.8 N, 87.7333333 W 
    34.0297881 N, 87.0592352 W 
    34.2016687 N, 86.4934089 W 
    34.5012877 N, 86.6855493 W 
 
```{r, eval = FALSE}
# Throw out everything from the first space to the end
north = as.numeric(gsub(" .*$", "", latlon))

# Retain only the bit between ", " and " W"
west = -as.numeric(gsub(".*, (.*) W", "\\1", z))
```


Example 2: Mapping bird distributions
===============================
(see "[bbs.html](bbs.html)")

Questions?
==================
type:prompt

Why R?
========================
incremental:true

It's what your colleagues use
  * packages to do stuff you want
  * interfaces with everything else
  * share code with colleagues

RStudio
=====================================


Questions?
==================
type:prompt

Talking to R
======================================
incremental:true
type:section

R is like your old graphing calculator
=====================================
incremental:true
## Arithemetic works like you'd expect:
```{r}
(1 + 1 * 3)^3
```

## So do lots of basic math functions:
```{r}
cos(pi)
```

R is like your old graphing calculator
=====================================
incremental:true

R can also make graphs

```{r}
plot(function(x) sin(x^2), from = 0, to = 5)
```

Code can include "comments"
==================================
incremental:true

Anything following "`#`" is ignored through the end of the line.

```{r}
1+1 # This is a comment.  R ignores it.
2+2 # But tomorrow, it could be helpful
```

```{r}
# for understanding the code you
# wrote today.
```

Questions?
==================
type:prompt

Assignment: Data can have names
=====================================
type:section


Referring back to our data
=================================
incremental:true

* Don't always want to type 525600 for number of minutes in a year.
* Want to separate data from code:
  * Insect biomass = fly biomass + beetle biomass + bug biomass
  * Total biomass = fly biomass + beetle biomass + bug biomass + algae biomass
* Only need to update _fly biomass_ once. 

Giving a name to your data
===================================
incremental:true
* `name <- data` &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;or&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; `name = data`
  * "The container called 'name' gets filled with the data"
  
```{r}
insect_biomass = 12
area = 50
proportion_ants = .3
```

```{r}
insect_biomass / area
insect_biomass * proportion_ants
```

Questions?
==================
type:prompt

Changing saved values
=======================
incremental:true

```{r}
x = 2  # Save "2"" with the name "x"
y = x  # save x's current value with the name "y"
```

```{r}
x = 3  # Change x's value to 3
x
```

* What's y's value?
```{r}
y
```


Keeping track of what you've saved
=============================
incremental:true
* RStudio tells you what you've saved in the upper-right under "Environmentâ†’Global Environment"
* Sometimes also called the "workspace"
* Can also access it with the `ls()` or `objects` commands
* Clear everything out with the broom icon


Using functions
==============================
type:section


Using functions:
=============================
incremental:true
```{r}
(sin(1) + log(5)) / 3
```

Functions are verbs
========================
incremental:true
"Take this thing and do the function to it"

* Take this cookie and **eat** it
* Take this number and **square** it

```{r}
cos(pi) # Take pi and *calculate its cosine*
```

```{r}
log(area) # Take `area` & *calculate its log*
```

Functions can have modifiers
===============================
incremental:true

* Take this cookie and **eat** it **carefully**

```{r}
log(area, base = 2) # Take `area` & *calculate its log* *in base 2*
```

```{r}
rep(5, times = 7) # Take 5 and *repeat* it 7 times*
```

* Data & modifiers passed to functions are called *arguments*

Anatomy of a function call
===================================
* Name of function (`sin`, `log`, `rep`)
* Parentheses enclosing the arguments
* Arguments, separated by commas

Arguments
==================================

Naming the arguments is (usually) optional:
```{r}
log(3, 2)
log(x = 3, base = 2)
```
***

Some arguments have default values that don't need to be specified: these can
be found on the help pages.

<center>**Questions so far?**</center>

There are tons of functions!
=================================
incremental:true
* You don't need to know all of them
* Most common R usage pattern: use pre-written functions on your custom data
  * do standard actions to your unique stuff
* You can also write your own functions

<Break>
===============================
type:section



Getting help
===============================
type:section

Help files
================================
incremental:true
* `?function_name` or `help(function_name)`
```{r}
help(rep)
?rep
```

* Some special functions like "+" need to be quoted; quoting never hurts

Parts of a help file
=============================
* **Title:** big picture in big text
* **Description:** summary
* **Usage:** very minimal examples
* **Arguments:** list of ways you can customize the function's action for your needs
* **Details:** Details
* **Value:** What you get out of the function
* **Examples** (consider starting here): ways to use the function

Some help files have a **Note** or **Warning** section for even more information

Help files are annoying
===========================
incremental:true

![](figures/last_resort.png)

***

* Need to know the function name
* Operators and special things need backticks
* Written for programmers, by programmers
* Might need to look in 3-4 different sections.
  * Jump around, focus on **Usage** and **Examples**
* It gets easier

Other help sources (part 1)
==========================
* Task views (for sifting through packages on a given topic):
  * Ecology: http://cran.r-project.org/web/views/Environmetrics.html
  * Spatial: http://cran.r-project.org/web/views/Spatial.html
  * Phylogenetics: http://cran.r-project.org/web/views/Phylogenetics.html
  * Genetics: http://cran.r-project.org/web/views/Genetics.html
*  Vignettes (for package tutorials etc):
  * `vignette(topic = "topic_name", package = "package_name")`
  * vignette PDFs on CRAN

Other help sources (part 2)
================================

* Google, http://www.rseek.org/
  * Stack Overflow / Cross Validated (read and/or ask)
  * R-help lists (read-only!)
* Davis R Users Group (and mailing list: read and/or ask)
* [More tips](http://www.burns-stat.com/documents/tutorials/impatient-r/more-r-search/)

Other help sources (part 2)
===============================

![](figures/stackoverflow0.png)

Getting ahead of the curve
==============================
Books/courses
* [Impatient R](http://www.burns-stat.com/documents/tutorials/impatient-r/)
* [R Basics workshop:](http://rbasicsworkshop.weebly.com/presentations--exersices.html)
* Notes from [Cosma Shalizi's statistical computing course](http://www.stat.cmu.edu/~cshalizi/statcomp/14/)
* *[The Art of R programming](http://www.amazon.com/The-Art-Programming-Statistical-Software/dp/1593273843)*
* [Duncan Temple Lang](http://www.stat.ucdavis.edu/~duncan/)'s courses at Davis
* Hadley Wickham's [Advanced R](http://adv-r.had.co.nz/) website/book

***

R "Gotcha's" 
 * *[The R Inferno](http://www.burns-stat.com/documents/books/the-r-inferno/)*
 * [aRrgh: a newcomer's (angry) guide to R](http://tim-smith.us/arrgh/) (written for programmers)

Questions?
======================
type:section

When things go wrong
=====================
incremental:true

* Errors
  * "Something went so badly wrong that I stopped and gave up before I broke something"
  * `1 + "two"`
```{r, echo = FALSE}
cat("Error in 1 + \"two\" : non-numeric argument to binary operator")
```  

***

* Warnings
  * "Something *might* be wrong, but I kept going"
  * `log(-1)`
```{r, echo = FALSE}
cat("[1] NaN
Warning message:
In log(-1) : NaNs produced")
```

When things go wrong
========================
* Bugs:
  * "I told R to do the wrong thing"
  * These are the scariest, because you don't always know your code is wrong.
* [More on errors and warnings](http://www.burns-stat.com/documents/tutorials/impatient-r/#errors)

***
![](figures/H96566k.jpg)

A horrifying bug
=================
```{r}
pi = 7
#
# 100 lines of code later...
#
cos(pi)
```


Questions?
======================
type:section

Break
==============
type:section

Data (nouns)
===============
type:section


Vectors
==============
incremental:true
We've already seen *scalars*

```{r}
area = 50
```


* Data can also form *vectors*
```{r}
rep(1, times = 5)
```

Making your own vectors
======================
incremental:true

Use the `c` ("combine") function
* Elements have a position and (optionally) names

```{r}
biomass = c(bugs = 12.1, flies = 23.7, beetles = 3.1)
biomass2 = c(bugs = 7.1, flies = 3.8, beetles = 8.2)
```

* Concatenate vectors with `c` as well.
```{r}
both_biomass = c(biomass, biomass2)
```

Vectors can hold different kinds of data
===================
* Vectors always belong to *one* "type"
  * **logical**: TRUE or FALSE
  * **integer**: ..., -1, 0, 1, 2, ...
  * **numeric**: 3.141592653589793115998, 2.718281828459045090796
  * **character**: "anything", "3", "Î£Î”Î˜â„¢"
* R "promotes" vectors when concatenated:
  * `c(biomass, "not a number")` is a character vector

<center>**Questions?**</center>

Arithmetic on vectors:
=================================

Arithmetic works element-by-element (based on position, *not* name!)

```{r}
biomass
biomass2
biomass + biomass2
```

Shorter vectors are "recycled"
==================================
```{r}
biomass
area
biomass / area
```

Recycling can be dangerous!
====================================
```{r}
c(10, 20) + c(1, 2, 3, 4)
```


You can also compare vectors
===========================
incremental:true

Greater-than-or-equal (â‰¥, typed as `>=`)
```{r}
biomass >= biomass2
```

Test for equality with `==`

```{r}
5 == 5 * 1
```

***

* Be careful about rounding error!
```{r}
(1.0 - 0.9 - 0.1) == 0
```

* $1.0 - 0.9 - 0.1 = -2.78^{-17}$

* use `all.equal` instead

Getting data out of a vector with [square brackets]
==============================
We want the second element of our vector, which has fly biomass

```{r, echo = FALSE}
biomass
```

```{r, eval = FALSE}
biomass["flies"]               # By name
biomass[2]                     # By index
biomass[c(-1, -3)]             # Drop negatives
biomass[c(FALSE, TRUE, FALSE)] # With logic
biomass[biomass > 20]          # With a test
```

Factors
=======================
* Describes **categories** like experimental treatments
  * "Nitrogen addition", "Phosphorous addition",  "Control"

```{r, eval = FALSE}
factor(c("Nitrogen addition", "Phosphorous addition",  "Control", "Nitrogen addition"))
```

<center>**Stored internally as 1, 2, 3!**</center>

Questions about vectors?
=========================

Data frames
=======================
incremental:true

Remember `biomass` and `biomass2`?

* What if you have biomasses at 100 sites?

```{r}
biomass_df = data.frame(
  site = c("site 1", "site 2", "site 3", "site 4", "site 5"), 
  bugs = c(12.1, 7.1, 2.8, 12.5, 3.1), 
  flies = c(23.7, 3.8, 11.3, 32.1, 11.9),
  beetles = c(3.1, 8.2, 17.1, 3.9, 11.7)
)
```

Data frames
==============================
```{r, eval = FALSE}
biomass_df = data.frame(
  site = c("site 1", "site 2", "site 3", "site 4", "site 5"), 
  bugs = c(12.1, 7.1, 2.8, 12.5, 3.1), 
  flies = c(23.7, 3.8, 11.3, 32.1, 11.9),
  beetles = c(3.1, 8.2, 17.1, 3.9, 11.7)
)
```

A `data.frame` has one column for each variable, and one row for each replicate.

Each variable is a vector.

Variables can be different types

Can contain missing values (`NA`)

Learning about your objects
==============================

```{r}
# Structure of object
str(biomass_df) # Rstudio has same info
```

```{r}
# Top 6 rows.with "head"
head(InsectSprays) # "Tail" gives bottom 6
```

Learning about your objects
============================
```{r}
class(biomass_df)  # What is it?
length(biomass_df) # Number of vectors in DF
dim(biomass_df)    # Dimensions
```

***
```{r}
plot(biomass_df)   # What's it look like?
```


Subsetting data frames
=========================
```{r}
biomass_df$flies # pull out fly vector

# rows 1 and 2, columns "flies" and "beetles"
biomass_df[c(1, 2), c("flies", "beetles")]
```

Subsetting data frames
====================
incremental:true
* `[` versus `[[` versus `$`
  * `$` works on lists (including data frames). Pulls out _one_ element (e.g. a vector)
  * `[[` works on anything: pulls out _one_ element (e.g. a vector)
  * `[` works on anything: pulls out _one or more_ elements, leaving them in their original container (e.g. a dataframe).
  
Questions?
=================
type:prompt

Lunch!
==================
type:section

Plotting
==================
Workhorse is the `plot` function

```{r}
plot(biomass_df)
```

Plotting
==================
Workhorse is the `plot` function

```{r}
# The tilde indicates a "formula"
# "data" tells R where to look for flies/bugs
plot(flies ~ bugs , data = biomass_df)
```

Plotting
==================
Workhorse is the `plot` function

```{r}
plot(function(x) sin(x^2), from = 0, to = 5)
```

Plotting
=======================
Lots of other functions too!
```{r}
hist(biomass_df$beetles)
```

A blank canvas
========================
```{r}
plot(NULL, xlim = range(biomass_df$bugs), ylim = range(biomass_df$flies), xlab = "bug biomass (g/m^2)", ylab = "fly biomass (g/m^2)")
```

Adding points to the canvas
========================
```{r, eval = FALSE}
points(bugs ~ flies , data = biomass_df)
```

```{r, echo = FALSE}
plot(NULL, xlim = range(biomass_df$bugs), ylim = range(biomass_df$flies), xlab = "bug biomass (g/m^2)", ylab = "fly biomass (g/m^2)")
points(flies ~ bugs , data = biomass_df)
```

Spicing it up
=====================
```{r, eval = FALSE}
arrows(x0 = 5, y0=8, x1 = 12, y1 = 20, lwd = 5, col = "blue")
text(x = 5, y = 20, labels = "Text", cex = 3)
```


```{r, echo = FALSE}
plot(NULL, xlim = range(biomass_df$bugs), ylim = range(biomass_df$flies), xlab = "bug biomass (g/m^2)", ylab = "fly biomass (g/m^2)")
points(flies ~ bugs , data = biomass_df)
arrows(x0 = 5, y0=8, x1 = 12, y1 = 20, lwd = 5, col = "blue")
text(x = 5, y = 20, labels = "Text", cex = 3)
```

Questions?
=======================
type:prompt

Customization alphabet soup
=====================
## `?par`

* **main:** main plot title
* **sub:** plot subtitle
* **xlab/ylab:** axis labels, 
* **log:** which axes should be on log scale
* **type:** **l**ine, **p**oint, **b**oth, etc.
* **cex:** **c**haracter **ex**pansion (size factor)
* **mfrow/mfcol:** Number of rows & columns on canvas

****

* **pch:** **p**lotting **ch**aracter
* **col:** color
* **lty:** **l**ine **ty**pe (dashed, dotted, etc)
* **lwd:** **l**ine **w**i**d**th
* **bty:** **b**ox  **ty**pe
* **mgp:** margin size
* **axes:** TRUE/FALSE
* **asp:** Aspect ratio

A real example
==================
incremental:true
![](figures//box.png)

```{r, echo = FALSE}
myyellow = rgb(red = 1, green = 1, blue = 0, alpha = .4)
```


A real example
=================
```{r, eval = FALSE}
par(mfrow = c(2, 1)) # 2 rows of plots

myyellow = rgb(red = 1, green = 1, blue = 0, alpha = .4)

# Plot the first beaver's temp versus time
plot(temp ~ time, data = beaver1, main = "Beaver 1")

# Giant rectangle
rect(xleft = 800, xright = 1500, ytop = 1000, ybottom = -1000, col = myyellow, border = NA)

# Plot 2nd beaver's temperature versus time
plot(temp ~ time, data = beaver2, main = "Beaver 2")
rect(xleft = 800, xright = 1500, ytop = 1000, ybottom = -1000, col = myyellow, border = NA)
```

A real example
=================

```{r, echo = FALSE}
par(mfrow = c(2, 1)) # 2 rows of plots

# Plot the first beaver's temp versus time
plot(temp ~ time, data = beaver1, main = "Beaver 1")

# Giant rectangle
rect(xleft = 800, xright = 1500, ytop = 1000, ybottom = -1000, col = myyellow, border = NA)

# Plot 2nd beaver's temperature versus time
plot(temp ~ time, data = beaver2, main = "Beaver 2")
rect(xleft = 800, xright = 1500, ytop = 1000, ybottom = -1000, col = myyellow, border = NA)
```

A real example
=================

![](figures/stackoverflow.png)


A real example
=================

![](figures/stackoverflow2.png)

A real example
===================
```{r, echo = FALSE}
par(mfrow = c(2, 1)) # 2 rows of plots

# Plot the first beaver's temp versus time
plot(temp ~ time, data = beaver1, main = "Beaver 1")
rect(xleft = 800, xright = 1500, ytop = 1000, ybottom = -1000, col = myyellow, border = NA, xpd = TRUE)

# Plot 2nd beaver's temperature versus time
plot(temp ~ time, data = beaver2, main = "Beaver 2")
rect(xleft = 800, xright = 1500, ytop = 1000, ybottom = -1000, col = myyellow, border = NA, xpd = TRUE)
```

Saving your plots
===========================
* Rstudio "Export" button
* Other *graphics devices* (png, pdf, jpeg, tiff, etc.)

```{r, eval = FALSE}
# Set up the plotting device
pdf("figures/myplot.pdf", length = 7, width = 5)

# As many lines of graphics code as you'd like
plot(count ~ spray, data = InsectSprays)

# Seal up the pdf
dev.off()
```


Maps
===================
```{r, cache = TRUE, eval = FALSE}
library(mapdata)
# Tweak the margins
par("mai" = c(0, 0, 0, 0))
map(
  database = "worldHires", 
  proj = "albers", 
  param = c(29.5, 45.5),
  interior = TRUE,
  ylim = c(25, 75),
  xlim = c(-167, -53),
  resolution = 0.1,
  wrap = TRUE,
  col = "gray",
  mar = c(0, 0, 0, 0),
  myborder = 0,
  orientation = c(95, -102, 0),
  lwd = 2
)
```

Maps
===================
```{r, cache = TRUE, echo = FALSE}
library(mapdata)
# Tweak the margins
par("mai" = c(0, 0, 0, 0))
map(
  database = "worldHires", 
  proj = "albers", 
  param = c(29.5, 45.5),
  interior = TRUE,
  ylim = c(25, 75),
  xlim = c(-167, -53),
  resolution = 0.1,
  wrap = TRUE,
  col = "gray",
  mar = c(0, 0, 0, 0),
  myborder = 0,
  orientation = c(95, -102, 0),
  lwd = 2
)
```


Other graphics systems: ggplot2
==========================

```{r, echo=FALSE, cache = TRUE}
library(ggplot2)
```

```{r, cache = TRUE}
 qplot(x = displ, y = hwy, data = mpg, color = drv) + facet_wrap(~ cyl)
```

Other graphics systems: Lattice
==========================

```{r, echo=FALSE, cache = TRUE}
library(lattice)
```

```{r, cache = TRUE}
xyplot(hwy ~ displ | cyl, data = mpg, groups = drv)
```

Importing data
====================
type:section


Spreadsheets
==================
* `read.csv(file = "filename.csv")`
  * `stringsAsFactors=FALSE`
  * `header`?
  * `data.table::fread` is often faster

```{r, cache = TRUE}
head(read.csv("routes.csv")[3:6], header = TRUE, stringsAsFactors = FALSE)
```

Excel and databases
========================
* `RODBC` package
* `RMySQL`, `RSQLite`, `RPostgreSQL`, etc.
* http://cran.r-project.org/doc/manuals/r-release/R-data.html

* `dplyr`

Spatial data
=================
* [Methods for importing shapefiles](https://www.nceas.ucsb.edu/scicomp/usecases/ReadWriteESRIShapeFiles)
* The `raster` package is very efficient with large raster 
* The `sp` package has a lot of low-level spatial machinery (e.g. projections)
* `maps`, `mapdata`, and `maptools` for drawing maps in base graphics
* `RgoogleMaps` talks to Google Maps
* `ggmap` does maps in `ggplot2`
* [Spatial task view](http://cran.r-project.org/web/views/Spatial.html)

Talking to the Internet
==================
* `download.file`
* `RCurl` and `httr` packages for requesting data
* `XML` package for parsing web pages
* [Web Technologies Task View](http://cran.r-project.org/web/views/WebTechnologies.html)

***
* `twitteR` package
![](figures/tweet.png)


Loops and automation
=================
type:section

Computers are good at repetition
==================================
incremental:true
```{r}
rep("computers are good at repetition", 1000)
```

Humans are bad at repetition
================================
<!--Screenshot by "Mr Minton" (Flickr)-->
![](figures/1847220803_064e34f7b2_o.jpg)

Humans are bad at repetition
================================
```{r, eval = FALSE}
species = "grouse"
#
# 100 lines of code...
#
species = "turkey"
#
# 100 lines of identical code...
#
species = "prairie chicken"
#
# 100 lines of identical code...
#
```


While
================
incremental:true

As long as some condition holds, keep doing stuff in braces.

```{r, eval = FALSE}
while(1 > 0){
  print("Dave is cool!!!!!!!!")
}
```
```{r echo = FALSE}
for(i in 1:1E3){print("Dave is cool!!!!!!!!")}
```

replicate
==================
incremental:true
```{r}
results = replicate(
  1000,
  mean(rnorm(10)) # Average of 10 standard normals
)
```
```{r}
sd(results) # Should be about sqrt(1/10)
```

While
================
As long as some condition holds, keep doing stuff in braces.
```{r}
result = 2           # Start at 2
done = FALSE         # Task starts incomplete

while(!done){
  result = result^2 # Update result
  print(result)     # display result

  # See if we're done
  if(result > 100){done = TRUE}
}
```

For
===============
Do something for each element of x

```{r}
for(species in c("frog", "penguin", "rat")){
  new_name = paste0(toupper(species), "!")
  print(new_name)
}
```

For
=================
Do something for each element of x

```{r, eval = FALSE}
for(species in unique(finch$Aou)){
  # Make one of these plots
}
```

![](5290 map.png)


*apply
==================
S-apply (simplified-apply) does something to each element of your data set and returns a simplified result (e.g. a vector or matrix)

```{r}
sapply(biomass_df, mean)
```

Vector operations are faster than loops
=======================================
incremental:true

```{r}
x = rnorm(10000)
system.time(x + 1)

x_plus_one = numeric(length(x))
system.time(
  for(i in seq_along(x)){
    x_plus_one[i] = x[i] + 1
  }
)

```

Questions?
============================
type:prompt

Statistics
======================
type:section

t-test
======================
incremental:true
`?t.test`
```{r}
t.test(x = c(1, 2, 3, 1, 8, 5, 3), y = NULL, alternative = "two.sided", mu = 0, paired = FALSE, conf.level = 0.95)
```

t-test: contents of the result
======================
incremental:true
```{r}
str(t.test(x = c(1, 2, 3, 1, 8, 5, 3)))
```

t-test: extracting results
===============================
```{r}
t.test(x = c(1, 2, 3, 1, 8, 5, 3))$p.value
t.test(x = c(1, 2, 3, 1, 8, 5, 3))$conf.int
```

Chi-square test
===================
```{r}
chisq.test(c(11, 15), p = c(.25, .75))
```

linear model
==================

```{r}
plot(count ~ spray, data = InsectSprays)
```

linear model
=============================
incremental:true

```{r}
lm(count ~ spray, data = InsectSprays)
```

linear model
============================
```{r}
summary(lm(count ~ spray, data = InsectSprays))
```

linear model
============================
```{r}
anova(lm(count ~ spray, data = InsectSprays))
```

Model formulas
==================
**?formula**

* Formulas are **not** normal R code
* Variables included in the model are separated by "+"
* `a * b` means to include a, b, and their interaction
* Can "inhibit" formula interpretation with the `I` function


Generalized linear models
======================
```{r}
summary(glm(count ~ spray, data = InsectSprays, family = poisson))
```

Mixed effects
=====================
* `lme4` package, `lmer` and `glmer` functions
* use "|" (above the "enter" key) to mark random effects

Learning more statistics
=================
* [Ben Bolker's book, Ecological Models and Data in R](http://ms.mcmaster.ca/~bolker/emdbook/)
* Richard McElreath's "statistical rethinking" course